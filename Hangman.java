package examples;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import javax.swing.JPanel;




public class Hangman extends javax.swing.JFrame {
    public String currentWord;
    //public boolean exitStatus = false;
    public boolean exitSignal = false;
    /**
     * Creates new form NewJFrame
     */
    public Hangman() {
        initComponents();
        setDifficultyPanel.setVisible(false);
        hangmanPanel.setVisible(false);
        exitHangmanButton.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        hangmanPanel = new javax.swing.JPanel();
        corePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        southPanel = new javax.swing.JPanel();
        status = new javax.swing.JLabel();
        wrong = new javax.swing.JLabel();
        input = new javax.swing.JTextField();
        visibleLabel = new javax.swing.JLabel();
        exitHangmanButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        restartButton = new javax.swing.JButton();
        newGameButton = new javax.swing.JButton();
        setDifficultyPanel = new javax.swing.JPanel();
        nameDifficulty = new javax.swing.JLabel();
        slideDifficulty = new javax.swing.JSlider();
        nameDifficultyPrompt = new javax.swing.JLabel();
        startGameButton = new javax.swing.JButton();
        backgroundMist = new javax.swing.JLabel();
        backgroundMoonPic = new javax.swing.JLabel();
        backgroundMoonGif = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(498, 594));
        setResizable(false);
        getContentPane().setLayout(null);

        hangmanPanel.setBackground(java.awt.Color.black);
        hangmanPanel.setPreferredSize(new java.awt.Dimension(400, 500));

        corePanel.setPreferredSize(new java.awt.Dimension(400, 400));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/examples/hangmanforest.png"))); // NOI18N

        javax.swing.GroupLayout corePanelLayout = new javax.swing.GroupLayout(corePanel);
        corePanel.setLayout(corePanelLayout);
        corePanelLayout.setHorizontalGroup(
            corePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        corePanelLayout.setVerticalGroup(
            corePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        southPanel.setBackground(java.awt.Color.black);
        southPanel.setPreferredSize(new java.awt.Dimension(400, 100));
        southPanel.setLayout(new java.awt.GridLayout(5, 0));

        status.setBackground(java.awt.Color.black);
        status.setForeground(java.awt.Color.lightGray);
        status.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        status.setText("Status");
        southPanel.add(status);

        wrong.setBackground(java.awt.Color.black);
        wrong.setForeground(java.awt.Color.lightGray);
        wrong.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        wrong.setText("Wrong");
        southPanel.add(wrong);

        input.setBackground(java.awt.Color.darkGray);
        input.setForeground(java.awt.Color.white);
        southPanel.add(input);

        visibleLabel.setBackground(java.awt.Color.black);
        visibleLabel.setForeground(java.awt.Color.lightGray);
        visibleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        visibleLabel.setText("visibleLabel");
        southPanel.add(visibleLabel);

        exitHangmanButton.setBackground(java.awt.Color.darkGray);
        exitHangmanButton.setForeground(java.awt.Color.white);
        exitHangmanButton.setText("EXIT");
        exitHangmanButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                exitHangmanButtonKeyPressed(evt);
            }
        });
        southPanel.add(exitHangmanButton);

        javax.swing.GroupLayout hangmanPanelLayout = new javax.swing.GroupLayout(hangmanPanel);
        hangmanPanel.setLayout(hangmanPanelLayout);
        hangmanPanelLayout.setHorizontalGroup(
            hangmanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(corePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(hangmanPanelLayout.createSequentialGroup()
                .addComponent(southPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        hangmanPanelLayout.setVerticalGroup(
            hangmanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hangmanPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(corePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(southPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(hangmanPanel);
        hangmanPanel.setBounds(50, 10, 400, 500);

        exitButton.setBackground(java.awt.Color.red);
        exitButton.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        exitButton.setForeground(java.awt.Color.white);
        exitButton.setText("Exit");
        exitButton.setToolTipText("Do you want to quit?");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        getContentPane().add(exitButton);
        exitButton.setBounds(350, 510, 120, 49);

        restartButton.setBackground(new java.awt.Color(51, 51, 0));
        restartButton.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        restartButton.setForeground(java.awt.Color.white);
        restartButton.setText("Restart");
        restartButton.setToolTipText("Restart the game on the same difficulty.");
        restartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartButtonActionPerformed(evt);
            }
        });
        getContentPane().add(restartButton);
        restartButton.setBounds(180, 510, 124, 49);

        newGameButton.setBackground(new java.awt.Color(0, 0, 0));
        newGameButton.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        newGameButton.setForeground(java.awt.Color.white);
        newGameButton.setText("New Game");
        newGameButton.setToolTipText("Start a new game and select a difficulty.");
        newGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameButtonActionPerformed(evt);
            }
        });
        getContentPane().add(newGameButton);
        newGameButton.setBounds(20, 510, 120, 49);

        setDifficultyPanel.setBackground(new java.awt.Color(102, 102, 102));
        setDifficultyPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setDifficultyPanel.setPreferredSize(new java.awt.Dimension(300, 200));
        setDifficultyPanel.setLayout(null);

        nameDifficulty.setFont(new java.awt.Font("Tempus Sans ITC", 1, 11)); // NOI18N
        nameDifficulty.setForeground(new java.awt.Color(255, 255, 255));
        nameDifficulty.setText("Easy           Medium         Hard          Expert");
        setDifficultyPanel.add(nameDifficulty);
        nameDifficulty.setBounds(10, 120, 280, 20);

        slideDifficulty.setBackground(java.awt.Color.white);
        slideDifficulty.setMaximum(4);
        slideDifficulty.setMinimum(1);
        slideDifficulty.setValue(1);
        setDifficultyPanel.add(slideDifficulty);
        slideDifficulty.setBounds(30, 80, 240, 30);

        nameDifficultyPrompt.setFont(new java.awt.Font("Tempus Sans ITC", 1, 18)); // NOI18N
        nameDifficultyPrompt.setForeground(new java.awt.Color(204, 204, 204));
        nameDifficultyPrompt.setText("Select Your Difficulty");
        setDifficultyPanel.add(nameDifficultyPrompt);
        nameDifficultyPrompt.setBounds(40, 30, 230, 30);

        startGameButton.setBackground(new java.awt.Color(0, 0, 0));
        startGameButton.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        startGameButton.setForeground(new java.awt.Color(240, 240, 240));
        startGameButton.setText("Start!");
        startGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startGameButtonActionPerformed(evt);
            }
        });
        setDifficultyPanel.add(startGameButton);
        startGameButton.setBounds(110, 140, 70, 48);

        backgroundMist.setIcon(new javax.swing.ImageIcon(getClass().getResource("/examples/hangmantitle2.png"))); // NOI18N
        setDifficultyPanel.add(backgroundMist);
        backgroundMist.setBounds(0, 0, 300, 200);

        getContentPane().add(setDifficultyPanel);
        setDifficultyPanel.setBounds(100, 210, 300, 200);

        backgroundMoonPic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/examples/hangmantitle.png"))); // NOI18N
        getContentPane().add(backgroundMoonPic);
        backgroundMoonPic.setBounds(0, 220, 500, 375);

        backgroundMoonGif.setBackground(new java.awt.Color(0, 0, 0));
        backgroundMoonGif.setIcon(new javax.swing.ImageIcon(getClass().getResource("/examples/moon.gif"))); // NOI18N
        getContentPane().add(backgroundMoonGif);
        backgroundMoonGif.setBounds(0, -40, 510, 300);

        pack();
    }// </editor-fold>                        


/*
class exit implements ActionListener{
    private void restartButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
      String randomWord = currentWord;
        new MainWindow(randomWord);
    }   
}
*/

// exit
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        System.exit(0);
    }                                          



// select difficulty
    private void startGameButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
        int difficulty = slideDifficulty.getValue();
        RandomWord randomWord = new RandomWord(difficulty);
        currentWord = randomWord.returnWord();
        setDifficultyPanel.setVisible(false);
        
        
        MainWindow mainWindow = new MainWindow(currentWord);
    }                                               




// open difficulty selection
    private void newGameButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
        setDifficultyPanel.setVisible(true);
        setDifficultyPanel.setSize(300, 200);
    }                                             




// restart
    private void restartButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
       String randomWord = currentWord;
        MainWindow mainWindow = new MainWindow(randomWord);
    }                                             

    
    
    private void exitHangmanButtonKeyPressed(java.awt.event.KeyEvent evt) {                                             
         exitSignal = true;
    }                                            

    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Hangman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Hangman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Hangman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Hangman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Hangman().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel backgroundMist;
    private javax.swing.JLabel backgroundMoonGif;
    private javax.swing.JLabel backgroundMoonPic;
    private javax.swing.JPanel corePanel;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton exitHangmanButton;
    public javax.swing.JPanel hangmanPanel;
    private javax.swing.JTextField input;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel nameDifficulty;
    private javax.swing.JLabel nameDifficultyPrompt;
    private javax.swing.JButton newGameButton;
    private javax.swing.JButton restartButton;
    private javax.swing.JPanel setDifficultyPanel;
    private javax.swing.JSlider slideDifficulty;
    private javax.swing.JPanel southPanel;
    private javax.swing.JButton startGameButton;
    private javax.swing.JLabel status;
    private javax.swing.JLabel visibleLabel;
    private javax.swing.JLabel wrong;
    // End of variables declaration                   


public class HangmanFigure extends JPanel {
	
	private int guesses;

	public HangmanFigure() {
		//super();
		guesses = 0;
		//setPreferredSize(new Dimension(300, 300));
		setOpaque(true);
	}
	
	public void paintComponent(Graphics g) {
		g.setColor(Color.RED);
		
		// base
		if(guesses > 0) {
			g.drawLine(1, 299, 299, 299);
		}
		
		// right wall
		if(guesses > 1) {
			g.drawLine(299, 299, 299, 1);
		}
		
		// top line
		if(guesses > 2) {
			g.drawLine(150, 1, 299, 1);
		}
		
		// hanging line
		if(guesses > 3) {
			g.drawLine(150, 1, 150, 70);
		}
		
		// face
		if(guesses > 4) {
			
			g.drawOval(150-25, 70, 50, 50);
			//g.drawImage(doge,150-25,70,null );
		}
		
		// body
		if(guesses > 5) {
			g.drawLine(150, 120, 150, 200);
		}
		
		// left hand
		if(guesses > 6) {
			g.drawLine(150, 150, 110, 140);
		}
		
		// right hand
		if(guesses > 7) {
			g.drawLine(150, 150, 190, 140);
		}
		
		// left leg
		if(guesses > 8) {
			g.drawLine(150, 200, 120, 250);
		}
		
		// right leg
		if(guesses > 9) {
			g.drawLine(150, 200, 180, 250);
			
		}
	}
	
	public void set() {
		guesses++;
		paintComponent(getGraphics());
	}
	
}    
     
public class MainWindow extends javax.swing.JFrame {
	  
    
       
	private int remainingGuesses;
	private String wrongGuesses;
	private String word;
	private String visible;
        
        public void exitWindow(){
            //exitHangmanButton.setVisible(true);
            //if(true==exitSignal){
                this.dispose();
                exitSignal = false;
            //}
        }
        
	public MainWindow(String toGuess) {
		remainingGuesses = 10;
		wrongGuesses = "";
		word = toGuess;
		visible = "";
		for(int i = 0; i < word.length(); ++i) {
			visible += "_ ";
		}

		//JPanel corePanel = new JPanel();
		corePanel.setVisible(true);
                corePanel.setLayout(new BorderLayout());
		input.setEnabled(true);

                
		status.setText("You have "+remainingGuesses+" remaining");
		wrong.setText("Wrong guesses so far: "+wrongGuesses);
		visibleLabel.setText(visible);
		//input = new JTextField(); 
		//JPanel 
		//southPanel = new JPanel(new GridLayout(4, 1));
		//southPanel.add(status);
		//southPanel.add(visibleLabel);
		//southPanel.add(input);
		//southPanel.add(wrong);
		
		corePanel.add(southPanel, BorderLayout.SOUTH);
		final HangmanFigure hf = new HangmanFigure();
		corePanel.add(hf, BorderLayout.CENTER);

		this.add(corePanel, BorderLayout.CENTER);
		
		input.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				
				String text = input.getText();
				
				if(text.length()  == 1 && text.matches("[a-z]")) {
					
					boolean guessFound = false;
					
					for(int i = 0; i < word.length(); ++i) {
						if(text.charAt(0) == word.charAt(i)) {
							guessFound = true;
							
							String newVisible = "";
							for(int j = 0; j < visible.length(); ++j) {
								if(j == (i*2)) {
									newVisible += word.charAt(i);
								}
								else {
									newVisible += visible.charAt(j);
								}
							}
							visible = newVisible;
							visibleLabel.setText(visible);
						}
					}
					
					if(!guessFound) {
						if(--remainingGuesses >= 0) {
							status.setText("You have "+remainingGuesses+" guesses remaining");
							wrongGuesses += text+" ";
							wrong.setText("Wrong guesses so far: "+wrongGuesses);
							hf.set();
						}
						else {
							status.setText("You lost: the word was "+word);
                                                        input.setEnabled(false);
                                                       // exitWindow();
                                                }
					}
					else {
						String actualVisible = "";
						for(int i = 0; i < visible.length(); i+=2) {
							actualVisible += visible.charAt(i);
						}
						
						if(actualVisible.equals(word)) {
							status.setText("Congratulations, you have won!");
                                                        input.setEnabled(false);
                                                      //  exitWindow();
						}
					}
				} else {
					System.out.println("Invalid input!");
				}
				
				input.setText("");
			}
                        
			
		});
                
               	this.pack();
		this.setLocationRelativeTo(null);
		this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		this.setVisible(true);
	} 
       
        
    }

public class RandomWord {
	private String[] easy = {"cat", "dog", "fish", "bug", "table"};
	private String[] medium = {"turtle", "random", "kitchen", "winner", "hacker"};
	private String[] hard = {"philosopher", "computer", "mountain", "keyboard","waterfall"};
	private String[] expert = {"photosynthesis","subfuscous","vegetarian","information","tyrannosaurus"};
	public String[] difficulty = new String [5];
		
	public RandomWord(int button)
	{
		switch (button){
			case 1: 					    //difficulty = easy
				for(int n = 0; n < 5; n++)
				{
					difficulty[n] = easy[n];
				}		
				break;
			case 2: 						//difficulty = medium
				for(int n = 0; n < 5; n++)
				{
					difficulty[n] = medium[n];
				}
				break;
			case 3: 						//difficulty = hard
				for(int n = 0; n < 5; n++)
				{
					difficulty[n] = hard[n];
				}
				break;
			case 4:							//difficulty = expert
				for(int n = 0; n < 5; n++)
				{
					difficulty[n] = expert[n];
				}
				break;
			default:
				for(int n = 0; n < 5; n++)
				{
					difficulty[n] = easy[n];
				}		
				break;
		}	
	}	
	
	
	public String returnWord()
	{
		Random rand = new Random();

		int  a = rand.nextInt(5);
		return difficulty[a];
	}
}
}


